server.port=8000

spring.messages.basename=messages, errors

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

#MySQL
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#DB Source URL
spring.datasource.url=jdbc:mysql://localhost:3306/book
#DB username
spring.datasource.username=root
#DB password
spring.datasource.password=1234
# 처리시 발생하는 SQL을 보여줄 것인지 결정
spring.jpa.show-sql=true
#프로젝트 실행시 자동으로 DDL(create, alter, drop) 을 생성할 것 인지 결정하는 설정
#create : 매번 테이블 생성을 새로 시도한다 / update : 변경이 필요한 경우 alter로 변경되고 테이블이 없는경우 create가 된다
spring.jpa.hibernate.ddl-auto=update 
#실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력한다 -> 실행되는 SQL의 가독성을 높여준다
spring.jpa.properties.hibernate.format_sql=true


spring.output.ansi.enabled=always

#jdbcTemplate sql log
logging.level.org.springframework.jdbc=debug


session.setMaxInactiveInterval(1800);

#myBatis
#mybatis.type-aliases-package=project.bookservice.domain.repository
log4j.logger.org.mybatis=DEBUG
mybatis.configuration.map-underscore-to-camel-case=true
logging.level.project.bookservice.repository.mybatis=trace

# 업로드 사이즈 제한 순서대로 파일 하나의 최대 사이즈, 멀티파트 요청 하나에 여러파일 업로드 가능하여 그 전체의 합
spring.servlet.multipart.max-file-size=1MB
spring.servlet.multipart.max-request-size=10MB

#서블릿 컨테이너에게 멀티파트 데이터를 처리하라고 설정하는 명령.
#스프링에서 제공하는 MultipartFile 이라는 것을 사용하는 것이 더 편리하기에 이것은 false 로 끄기
#spring.servlet.multipart.enabled=false

file.dir=/Users/anna/springboot/fileUpload/
file.dir2=C:/Users/USER/YDG/springboot/fileUpload/